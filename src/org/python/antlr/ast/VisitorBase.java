// Autogenerated AST node
package org.python.antlr.ast;
import org.antlr.v4.runtime.CommonToken;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.tree.TerminalNode;
import org.python.antlr.AST;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.antlr.base.excepthandler;
import org.python.antlr.base.expr;
import org.python.antlr.base.mod;
import org.python.antlr.base.slice;
import org.python.antlr.base.stmt;
import org.python.core.ArgParser;
import org.python.core.AstList;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyUnicode;
import org.python.core.PyStringMap;
import org.python.core.PyType;
import org.python.core.Visitproc;
import org.python.annotations.ExposedGet;
import org.python.annotations.ExposedMethod;
import org.python.annotations.ExposedNew;
import org.python.annotations.ExposedSet;
import org.python.annotations.ExposedType;

public abstract class VisitorBase<R> implements VisitorIF<R> {
    public R visitModule(Module node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitInteractive(Interactive node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitExpression(Expression node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitSuite(Suite node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitFunctionDef(FunctionDef node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitAsyncFunctionDef(AsyncFunctionDef node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitClassDef(ClassDef node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitReturn(Return node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitDelete(Delete node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitAssign(Assign node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitAugAssign(AugAssign node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitAnnAssign(AnnAssign node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitFor(For node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitAsyncFor(AsyncFor node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitWhile(While node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitIf(If node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitWith(With node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitAsyncWith(AsyncWith node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitRaise(Raise node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitTry(Try node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitAssert(Assert node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitImport(Import node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitImportFrom(ImportFrom node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitGlobal(Global node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitNonlocal(Nonlocal node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitExpr(Expr node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitPass(Pass node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitBreak(Break node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitContinue(Continue node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitExitFor(ExitFor node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitPopExcept(PopExcept node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitSplitNode(SplitNode node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitBlock(Block node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitBoolOp(BoolOp node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitBinOp(BinOp node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitUnaryOp(UnaryOp node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitLambda(Lambda node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitAnonymousFunction(AnonymousFunction node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitIfExp(IfExp node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitDict(Dict node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitSet(Set node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitListComp(ListComp node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitSetComp(SetComp node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitDictComp(DictComp node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitGeneratorExp(GeneratorExp node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitAwait(Await node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitYield(Yield node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitYieldFrom(YieldFrom node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitCompare(Compare node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitCall(Call node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitNum(Num node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitStr(Str node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitFormattedValue(FormattedValue node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitJoinedStr(JoinedStr node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitBytes(Bytes node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitNameConstant(NameConstant node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitEllipsis(Ellipsis node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitConstant(Constant node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitAttribute(Attribute node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitSubscript(Subscript node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitStarred(Starred node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitName(Name node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitList(List node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitTuple(Tuple node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitSlice(Slice node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitExtSlice(ExtSlice node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitIndex(Index node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    public R visitExceptHandler(ExceptHandler node) {
        R ret = unhandled_node(node);
        traverse(node);
        return ret;
    }

    abstract protected R unhandled_node(PythonTree node);
    abstract public void traverse(PythonTree node);
}
