// Autogenerated AST node
package org.python.antlr.ast;

public interface VisitorIF<R> {
    public R visitModule(Module node);
    public R visitInteractive(Interactive node);
    public R visitExpression(Expression node);
    public R visitSuite(Suite node);
    public R visitFunctionDef(FunctionDef node);
    public R visitAsyncFunctionDef(AsyncFunctionDef node);
    public R visitClassDef(ClassDef node);
    public R visitReturn(Return node);
    public R visitDelete(Delete node);
    public R visitAssign(Assign node);
    public R visitAugAssign(AugAssign node);
    public R visitAnnAssign(AnnAssign node);
    public R visitFor(For node);
    public R visitAsyncFor(AsyncFor node);
    public R visitWhile(While node);
    public R visitIf(If node);
    public R visitWith(With node);
    public R visitAsyncWith(AsyncWith node);
    public R visitRaise(Raise node);
    public R visitTry(Try node);
    public R visitAssert(Assert node);
    public R visitImport(Import node);
    public R visitImportFrom(ImportFrom node);
    public R visitGlobal(Global node);
    public R visitNonlocal(Nonlocal node);
    public R visitExpr(Expr node);
    public R visitPass(Pass node);
    public R visitBreak(Break node);
    public R visitContinue(Continue node);
    public R visitExitFor(ExitFor node);
    public R visitPopExcept(PopExcept node);
    public R visitSplitNode(SplitNode node);
    public R visitBlock(Block node);
    public R visitBoolOp(BoolOp node);
    public R visitBinOp(BinOp node);
    public R visitUnaryOp(UnaryOp node);
    public R visitLambda(Lambda node);
    public R visitAnonymousFunction(AnonymousFunction node);
    public R visitIfExp(IfExp node);
    public R visitDict(Dict node);
    public R visitSet(Set node);
    public R visitListComp(ListComp node);
    public R visitSetComp(SetComp node);
    public R visitDictComp(DictComp node);
    public R visitGeneratorExp(GeneratorExp node);
    public R visitAwait(Await node);
    public R visitYield(Yield node);
    public R visitYieldFrom(YieldFrom node);
    public R visitCompare(Compare node);
    public R visitCall(Call node);
    public R visitNum(Num node);
    public R visitStr(Str node);
    public R visitFormattedValue(FormattedValue node);
    public R visitJoinedStr(JoinedStr node);
    public R visitBytes(Bytes node);
    public R visitNameConstant(NameConstant node);
    public R visitEllipsis(Ellipsis node);
    public R visitConstant(Constant node);
    public R visitAttribute(Attribute node);
    public R visitSubscript(Subscript node);
    public R visitStarred(Starred node);
    public R visitName(Name node);
    public R visitList(List node);
    public R visitTuple(Tuple node);
    public R visitSlice(Slice node);
    public R visitExtSlice(ExtSlice node);
    public R visitIndex(Index node);
    public R visitExceptHandler(ExceptHandler node);
}
